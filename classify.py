import shutil
from shutil import copyfile

import tensorflow as tf
import numpy as np
import keras
import glob
import time

# Parameters
model_path = 'saved_model/malware_detection_model_20k.keras'  # Replace with the path to your saved model
file = 'virus_samples/Virus.Win32.Expiro.virus'  # Replace with the path to the file you want to classify
max_length = 40000  # The length to which you truncate or pad the file


def preprocess_file(file_path, max_length):
    """Preprocess the binary file to a fixed length."""
    # Read the binary file
    with open(file_path, 'rb') as file:
        data = file.read()

    # Convert to numpy array and truncate or pad to max_length
    data = np.frombuffer(data, dtype=np.uint8)
    if len(data) > max_length:
        data = data[:max_length]
    else:
        data = np.pad(data, (0, max_length - len(data)), mode='constant')

    return data

def preprocess_quantized(file_path, max_length):
    with open(file_path, 'rb') as file:
        data = file.read()

        # Convert to numpy array and truncate or pad to max_length
    data = np.frombuffer(data, dtype=np.uint8)
    if len(data) > max_length:
        data = data[:max_length]
    else:
        data = np.pad(data, (0, max_length - len(data)), mode='constant')

    return data.astype(np.float32)

def quantized_classify(file_data, interpreter):
    # Get input and output details
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()
    #print(input_details)
    # Set input tensor
    interpreter.set_tensor(input_details[0]['index'], file_data.reshape(1, -1))
    # Run inference
    interpreter.invoke()
    # Get the output
    output_data = interpreter.get_tensor(output_details[0]['index'])
    return output_data[0][0]

def classify_file(model: keras.Model, file_data):
    """Use the trained model to classify the file."""
    # Reshape for the model input (batch size, length)
    file_data = file_data.reshape(1, -1)  # Add batch dimension
    res =  model.predict(file_data, verbose=0)[0][0]
    return res


# Load the trained model
#model = keras.models.load_model(model_path)
interpreter = tf.lite.Interpreter(model_path='saved_model/malware_detection_quantized_20k.tflite')
interpreter.allocate_tensors()

end_interpreter = tf.lite.Interpreter(model_path='saved_model/malware_detection_quantized_20k_end.tflite')
end_interpreter.allocate_tensors()

start_time = time.time()
counter = 0
for file in glob.glob('benign/*'):
    try:
        # Classify the file
        #file_data = preprocess_file(file, max_length)
        #predicted_class = classify_file(model, file_data)
        quantized = quantized_classify(preprocess_quantized(file, 20000), interpreter)
        counter += 1
    except FileNotFoundError:
        continue

    print(f'\r{counter}', end='')
    if quantized > 0.3:
        quantized_end = quantized_classify(preprocess_quantized(file, 20000), end_interpreter)
        # Output the result
        print(f'\r{quantized}, {quantized_end}, {file}', (time.time() - start_time)/counter, f'\n{counter}', end='')
        shutil.copy(file, 'false_positives')
